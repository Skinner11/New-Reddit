swagger: "2.0"
info:
  description: "REST API documentation for the NEW REDDIT project"
  version: "1.0.0"
  title: "The New Reddit"
  termsOfService: "https://people.inf.elte.hu/hjlkec/"
  contact:
    email: "lvub0t@inf.elte.hu"
  license:
    name: "Apache 2.0"
    url: "http://teveclub.hu"
host: "localhost:8080"
basePath: "/api"
tags:
- name: "users"
  description: "Operations about users"
- name: "comments"
  description: "Operations about comments"
- name: "posts"
  description: "Operations about posts"
- name: "subreddits"
  description: "Operations about subreddits"
schemes:
- "https"
- "http"
paths:
  /users/me:
    get:
      tags:
      - "users"
      summary: "Get current user"
      operationId: "getCurrentUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "there is a loged in user"
          schema:
           $ref: "#/definitions/ApiResponse"
        404:
          description: "tehre is no loged in user"
          schema:
            $ref: "#/definitions/ApiResponse"
        
  /users:
    get:
      tags:
      - "users"
      summary: "Finds all users"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findAllUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        500:
          description: "Server error"
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Find user by id"
      operationId: "findUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/User"
        404:
          description: "user not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /users/register:
    post:
      tags:
      - "users"
      summary: "Add new user to database"
      operationId: "registerUser"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "Send the username and password in the body, encripted"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            password:
              type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        418:
          description: "username already taken"
          schema:
            $ref: "#/definitions/ApiResponse"
  /users/logoff:
    post:
      tags:
      - "users"
      summary: "Log off authenticated user"
      operationId: "logOffUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
            
  /comments/{id}:
    get:
      tags:
      - "comments"
      summary: "Get comment by id"
      operationId: "commentsByPostId"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        description: "comment id"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
    delete:
      tags:
      - "comments"
      summary: "Delete comment"
      operationId: "deleteComment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        description: "comment id"
      - name: "userId"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            userId:
              type: "integer"
              format: "int64"
      responses:
        200:
          description: "Successfully deleted"
          schema:
              $ref: "#/definitions/Comment"
        404:
          description: "comment not found"
          schema:
              $ref: "#/definitions/ApiResponse"
        409:
          description: "comment is not users"
          schema:
              $ref: "#/definitions/ApiResponse"
    patch:
      tags:
      - "comments"
      summary: "Modify comment"
      operationId: "modifyComment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        description: "comment id"
      - name: "userId"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            userId:
              type: "integer"
              format: "int64"
      responses:
        200:
          description: "Successfully modified"
          schema:
              $ref: "#/definitions/Comment"
        404:
          description: "comment not found"
          schema:
              $ref: "#/definitions/ApiResponse"
        409:
          description: "comment is not users"
          schema:
              $ref: "#/definitions/ApiResponse"
    
  /comments/user/{userId}:
    get:
      tags:
      - "comments"
      summary: "Get all comments of user"
      operationId: "getUserComments"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "All comments by a specific user"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        404:
          description:  "user not found"
          schema:
            $ref: "#/definitions/ApiResponse"

  /posts:
    get:
      tags:
      - "posts"
      summary: "List all posts"
      operationId: "listPosts"
      responses:
        200:
          description: "Successfully modified"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RedditPost"
        404:
          description: "Server is down"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ApiResponse"
    post:
      tags:
      - "posts"
      summary: "Post new The New Reddit post (see what I did there?)"
      operationId: "postNewRedditPost"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            userId:
              type: "integer"
              format: "int64"
            title:
              type: "string"
            textContent:
              type: "string"
            imageUrl:
              type: "string"
              format: "url"
      responses:
        200:
          description: "Successfully posted"
          schema:
            $ref: "#/definitions/ApiResponse"
        423:
          description: "User is banned"
          schema:
            $ref: "#/definitions/ApiResponse"
  /posts/{postId}:
    get:
      tags:
      - "posts"
      summary: "Get post by id"
      parameters:
      - name: "postId"
        in: "path"
        type: "integer"
        format: "int64"
        required: true
      operationId: "getPostById"
      responses:
        200:
          description: "Successfully modified"
          schema:
            $ref: "#/definitions/RedditPost"
    delete:
      tags:
      - "posts"
      summary: "Get post by id"
      operationId: "deletePostById"
      parameters:
      - name: "postId"
        in: "path"
        type: "integer"
        format: "int64"
        required: true
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            userId:
              type: "integer"
              format: "int64"
      responses:
        200:
          description: "Successfully deleted"
          schema:
              $ref: "#/definitions/RedditPost"
        409:
          description: "post is not users"
          schema:
              $ref: "#/definitions/ApiResponse"
  /posts/{postId}/comments:
    get:
      tags:
      - "posts"
      summary: "Gets comments to givent post"
      parameters:
      - name: "postId"
        in: "path"
        type: "integer"
        format: "int64"
        required: true
      responses:
        200:
          description: "Post exists"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"    
              
        404:
          description: "post not found"
          
          schema:
              $ref: "#/definitions/ApiResponse"
    post:
      tags:
      - "posts"
      summary: "Add comment to post"
      parameters:
      - name: "postId"
        in: "path"
        type: "integer"
        format: "int64"
        required: true
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            text:
              type: "string"
      responses:
        200:
          description: "Successfully commented"
          schema:
              $ref: "#/definitions/Comment"
        404:
          description: "post not found"
          schema:
              $ref: "#/definitions/ApiResponse"
  /subreddits:
    get:
      tags:
      - "subreddits"
      summary: "Lists all subreddits"
      responses:
        200:
          description: "Server is online"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Subreddit"
        500:
          description: "Server is not online"
    post:
      tags:
      - "subreddits"
      summary: "Create new subreddit"
      responses:
        200:
          description: "Successfull operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        418:
          description: "Subreddit with this name already exists"
          schema:
            $ref: "#/definitions/ApiResponse"
  /posts/subreddits/{subredditId}:
    get:
      tags:
      - "posts"
      summary: "Get posts that belong to a subreddit"
      parameters:
      - name: "subredditId"
        in: "path"
        type: "integer"
        format: "int64"
        required: true
      responses:
        200:
          description: "Successfull operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RedditPost"
        404:
          description: "Subreddit not found"
          schema:
            type: "object"
  /subreddits/{subredditId}:
    delete:
      tags:
      - "subreddits"
      summary: "Removes existing subreddit"
      parameters:
      - name: "subredditId"
        in: "path"
        type: "integer"
        format: "int64"
        required: true
      responses:
        200:
          description: "Successfull operation"
          schema:
            $ref: "#/definitions/ApiResponse"
    
    
securityDefinitions:
  newreddit_auth:
    type: "basic"
definitions:
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      postId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int32"
      text:
        type: "string"
    xml:
      name: "Comment"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      password:
        type: "string"
      userRole:
        type: "string"
        enum:
          - "GUEST"
          - "NORMAL"
          - "MOERATOR"
      registrationDate:
        type: "string"
    xml:
      name: "User"
  RedditPost:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      postId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      textContent:
        type: "string"
      imageUrl:
        type: "string"
        format: "url"
    xml:
      name: "RedditPost"
  Subreddit:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Subreddit"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
